{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","shift","image","props","images","maxShift","translateNext","itemWidth","step","frameSize","shiftNext","currentMaxShift","length","setState","infinity","translatePrev","shiftPrev","this","animationDuration","className","type","onClick","disabled","style","width","transform","transition","map","index","src","alt","toString","height","Component","App","handlerEvent","event","target","name","value","checked","onSubmit","preventDefault","onChange","min","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.474c3c76.chunk.js","sourcesContent":["import { Component } from 'react';\nimport { CarouselState } from '../types/CarouselState';\n\nimport './Carousel.scss';\n\ntype Props = CarouselState;\n\ntype State = {\n  shift: number,\n};\n\nexport class Carousel extends Component<Props, State> {\n  state = {\n    shift: 0,\n  };\n\n  image = this.props.images;\n\n  maxShift = 1;\n\n  translateNext = () => {\n    const {\n      itemWidth,\n      step,\n      frameSize,\n    } = this.props;\n    const { shift } = this.state;\n    const shiftNext = itemWidth * step + shift;\n\n    const currentMaxShift = itemWidth * this.image.length\n    - step * itemWidth\n    + ((step - frameSize) * itemWidth);\n\n    this.setState({\n      shift: shiftNext > currentMaxShift ? currentMaxShift : shiftNext,\n    });\n    this.maxShift = currentMaxShift;\n\n    if (!this.props.infinity) {\n      return;\n    }\n\n    if (shiftNext > currentMaxShift && shift !== currentMaxShift) {\n      this.setState({ shift: currentMaxShift });\n    } else if (shift === currentMaxShift) {\n      this.setState({ shift: 0 });\n    } else {\n      this.setState({\n        shift: shiftNext,\n      });\n    }\n  };\n\n  translatePrev = () => {\n    const {\n      itemWidth,\n      step,\n      frameSize,\n    } = this.props;\n    const { shift } = this.state;\n    const shiftPrev = shift - itemWidth * step;\n\n    const currentMaxShift = itemWidth * this.image.length\n    - step * itemWidth\n    + ((step - frameSize) * itemWidth);\n\n    this.setState({\n      shift: shiftPrev > 0 ? shiftPrev : 0,\n    });\n\n    if (!this.props.infinity) {\n      return;\n    }\n\n    if (shiftPrev > 0 && shift !== 0) {\n      this.setState({ shift: shiftPrev });\n    } else if (shift === 0) {\n      this.setState({ shift: currentMaxShift });\n    } else {\n      this.setState({ shift: 0 });\n    }\n  };\n\n  render() {\n    const {\n      images,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinity,\n    } = this.props;\n    const { shift } = this.state;\n\n    return (\n      <div className=\"Carousel\">\n        <button\n          type=\"button\"\n          className=\"Carousel__button Carousel__button--prev\"\n          onClick={this.translatePrev}\n          disabled={(shift === 0 && !infinity)\n            || frameSize === images.length}\n        >\n          {' '}\n        </button>\n        <ul className=\"Carousel__list\" style={{ width: `${frameSize * itemWidth}px` }}>\n          <div\n            className=\"Carousel__container\"\n            style={{\n              transform: `translateX(-${shift}px)`,\n              transition: `transform ${animationDuration / 1000}s`,\n            }}\n          >\n            {images.map((image, index) => (\n              <li key={image}>\n                <img\n                  src={image}\n                  alt={index.toString()}\n                  className=\"Carousel__image\"\n                  style={{ width: itemWidth, height: itemWidth }}\n                />\n              </li>\n            ))}\n          </div>\n        </ul>\n        <button\n          type=\"button\"\n          className=\"Carousel__button Carousel__button--next\"\n          data-cy=\"next\"\n          onClick={this.translateNext}\n          disabled={(shift === this.maxShift && !infinity)\n            || frameSize === images.length}\n        >\n          {' '}\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './styles/App.scss';\nimport { Carousel } from './components/Carousel';\nimport { CarouselState } from './types/CarouselState';\n\ntype State = CarouselState;\n\ntype Cases =\n  'itemWidth' |\n  'frameSize' |\n  'step' |\n  'animationDuration';\n\nexport class App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    itemWidth: 130,\n    frameSize: 3,\n    step: 3,\n    animationDuration: 1000,\n    infinity: false,\n  };\n\n  handlerEvent = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value, checked } = event.target;\n\n    switch (name) {\n      case 'itemWidth':\n      case 'frameSize':\n      case 'step':\n      case 'animationDuration':\n        this.setState({\n          [name]: name === 'frameSize'\n            ? 1\n            : +value,\n        } as { [K in Cases]: number; });\n        break;\n\n      default:\n        this.setState({ infinity: checked });\n        break;\n    }\n  };\n\n  render() {\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      step,\n      animationDuration,\n      infinity,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"App__title\" data-cy=\"title\">\n          Carousel with\n          {' '}\n          {images.length}\n          {' '}\n          images\n        </h1>\n        <form\n          className=\"App__form\"\n          onSubmit={(event) => {\n            event.preventDefault();\n          }}\n        >\n          <label>\n            Item width:\n            <input\n              name=\"itemWidth\"\n              type=\"number\"\n              value={itemWidth}\n              onChange={this.handlerEvent}\n            />\n          </label>\n          <label>\n            Frame Size:\n            <input\n              name=\"frameSize\"\n              type=\"number\"\n              min={1}\n              value={frameSize}\n              onChange={this.handlerEvent}\n            />\n          </label>\n          <label>\n            Step:\n            <input\n              name=\"step\"\n              type=\"number\"\n              value={step}\n              onChange={this.handlerEvent}\n            />\n          </label>\n          <label>\n            Animation duration:\n            <input\n              name=\"animationDuration\"\n              type=\"number\"\n              value={animationDuration}\n              onChange={this.handlerEvent}\n            />\n          </label>\n          <label>\n            Infinity:\n            <input\n              name=\"infinit\"\n              type=\"checkbox\"\n              checked={infinity}\n              onChange={this.handlerEvent}\n            />\n          </label>\n\n        </form>\n\n        <Carousel\n          images={images}\n          itemWidth={itemWidth}\n          frameSize={frameSize}\n          step={step}\n          animationDuration={animationDuration}\n          infinity={infinity}\n        />\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}